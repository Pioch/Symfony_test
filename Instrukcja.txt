Po skopiowaniu(zaktualizowaniu) projektu na nowy komputer:
- symfony composer update
- symfony console make:migration
- symfony console doctrine:migration:migrate 
- npm run dev -> kompilacja assetów webpack (tworzy/aktualizuje folder public/build)
- npm run watch -> kompiluje pliki js w assets
- npx tailwindcss init -p -> stworzenie pliku konfiguracyjnego tailwindcss
- jak nie działa npm install to zainstaluj node js

1. Tworzenie projektu i komendy
- symfony new my_project_directory --version="6.2.*" --webapp -> utworzenie projektu
- symfony server:start - uruchomienie serwera na Windows
- php bin/console server:run  - uruchomienie serwera na Linux
- composer require symfony/<component_name> - instalacja komponentu
- console debug:route -> wyświetla wszystkie dostępne ścieżki
- symfony console -> Wyświetla wszystkie dostępne komendy w konsoli
- W konsoli symfony console make:controller <nazwa kontrolera>  -> Tworzy nowy kontroler
- symfony console help -> Wyświetlenie pomocy 
- symfony composer update -> aktualizuje biblioteki

2. Opisy folderów
- W vendor/ -> Wszystki zainstalowane komponenty
- W templates/ -> Strony utworzene z kontrolerem
- W Controller/ -> Repozytoria
- W templates/ -> srony html.twig
- W Entity -> Wsystkie klasy entity (odnoszące się do tablic w DB)
- By podpiąć plik css lub js czy inny musi się znajdować w public


3. Kontrolery
W kontrolerze są funkcję przekierowujące do stron, zmienne przekazywane na strone, zmiene z dostępem do funkcji repozytorium
 - #[Route('/ścieżka', name: 'nazwa')] //Ustawienie ścieżki  /ścieżka -> przekieruje do strony podanej niżej w funkcji
    public function oldMethod(): Response {
        return $this->render('folder/index.html.twig', [
            'controller_name' => 'MoviesController',
        ]);
    }

- #[Route('/movies/{name}', name: 'app_movies')] {name} przy ścieżce pozwala na wyświetlenie strony z funkcji niżej z dowolnej ścieżki /nazwa_folderu/name, gdzie name jest dowolne
- #[Route('/movies/{name}', name: 'app_movies', methods:['GET', 'HEAD'])]  //methods definiuje jakie metody są dostępne przy zdefiniowanej ścieżce
- #[Route('/movies/{name}', name: 'app_movies', defaults: ['name' => null], methods:['GET', 'HEAD'])] -> default definiuje domyślne wartości dla parametru w ścieżce
- public function index($name): Response //$name -> Odczytanie wartości ze ścieżki nazwa_folderu/{name}



4. Widoki
- composer require twig -> teorzy base.html.twig w templates
- domyslnie strony html.twig są w templates
- return $this -> render('nazwa_strony.html.twig', [parametr1 => wartość, ...]); -> otwarcie określonej strony z parametrami
- {{title}}  -> przakazanie zmiennej do strony html z Kontrolera

- warunki:
{% if title %}
    <p>{{title}}</p>
{% else %}
    <p>Brak tytułu</p>
{% endif %}

5. Używanie układu strony z base.html.twig na innych stronach
- {% extends 'nazwa_strony.html.twig' %} -> dołączenie innej strony na stronie
- <title>{% block title %}Welcome!{% endblock %}</title> -> tutuł będzie dołączony do strony z pliku w {% extends %}
- {#komentarz#} -> zakomentowanie czegoś w html.twig

- Pętla for:
    {% for i in movies %} 
        <li>{{i}}</li>
    {% endfor %}

- {{_self}} -> zmienna globalna zawierająca nazwę strony
- {{_charset}} -> zmienne zawierająca typ znaków (UTF-8)

Defincja zmiennych globalnych: w config/packages/twig.yaml pod default_path należy utworzyć globals: 
np. globals:
        author: Piotr //author -> zmienna

5. Konfiguracja bazy danych
Biblioteki wymagane:
- composer require symfony/orm-pack
- composer require --dev symfony/maker-bundle

- .env -> plik konfiguracyjny aplkacji (środowisko, baza danych)
- konfiguracja phpmyadmin -> phpMyAdmin/config.inc.php:
$cfg['Servers'][$i]['user'] = 'root';
$cfg['Servers'][$i]['password'] = 'placki123';

DATABASE_URL="mysql://db_user:db_password@127.0.0.1:3306/db_name?serverVersion=8.0.32&charset=utf8mb4":
- zamiast db_user nazwa użytkownika
- zamiast db_password hasło
- zamiast db_name nazwa bazy danych

Tworzenie klasy tabeli (Entity): (dla każdego entity automatycznie dodawana jest kolumna z id)
W klasie entity są funkcję do odczytywnia i ustawiania wartości kolumn w tablicy
- symfony console make:entity nazwa_tabeli
- później podaje się nazwę kolumny, typ, max ilość znaków, czy może być null
- następnie można dodać następne kolumny
- by wyjść CTRL + c

Utworzona klasa jest w src/Entity
- symfony console make:entity istniejąca_klasa -> dodanie nowej kolumny
Utworzenie zależności między dwoma klasami tablic:
- typ danych ManyToMany 
- wpisanie nazwy klasy tabeli od której ma być zależna kolumna
- następne yes by dodać fukcję do obu klas
- cnazwa nowej kolumny w zależnej tabeli (klasie)

Migracja Utworzony tabel (klas entities) z bazą danych:
- symfony console make:migration
- symfony console doctrine:migration:migrate 
- yes

Relacje między tabelami:
- ManyToOne -> Dodanie do pierwszej tabela kolumny np. z id z drugiej tabeli lub utworzenie nowej tabeli z id pierwszej i z id drugiej tabeli
- OneToMany -> Dodanie do pierwszej tabeli id z drugiej i dodanie do drugiej tabeli id z pierwszej
- ManyToMany -> Tworzy nową tablice łączącą pierwszą i drugą (id z pierwszej i id z drugiej tabeli)

6. Sztuczne dane
- symfony composer require --dev doctrine/doctrine-fixtures-bundle -> Dodaje nowe komendy:
- symfony console doctrine:fixtures:load -> czyści zawartość bazy danych i tworzy w src/DataFixtures/AppFixtures.php
- w DataFixtures można utworzyć nowy plik (skopiować wszystko z automatycznie utworzonego) i po dopisaniu:
 use App\Entity\NazwaKlasy; mozna używać funkcji do dodawania danych to tabeli
 - kolejne wywołanie symfony console doctrine:fixtures:load wykona zapytania z nowo utworzonego pliku

Dodanie danych to tabeli łączącej dwie:
 pod $manager->flush();
 - $this->addReference('nazwa_referencji', $nazwa_zmiennej);
 - w drugim pliku z klasą tworzącą dane do której odnosi się referencja przed $manager->persist($movie); : $movie->addActor($this->getReference('nazwa_referencji')); 

7. Repozytoria Entity.
W repozytoriach są funkcję do zapisywania i usuwania wierszów z tabeli
- w kontrolerze klasy dodanie do funkcji public function index(MovieRepository $movieRepository) -> pozwala na dostęp do funkcji danego repozytorium w bieżącej funkcji
- dd($zmienna); -> wyświetla zawartość zmiennej na stronie (pododne do var_dump)

Wykorzystanie EntityManagerInterface (pozwala na zrobienie tego co dodanie repozytorium do funkcji tylko daje dostęp do większej ilości funkcji)
- trzeba dodać:
use Doctrine\ORM\EntityManagerInterface;
use App\Entity\Nazwa_entity;
np.:  public function index(EntityManagerInterface $em): Response {
        $repository = $em->getRepository(Movie::class);
        $movies = $repository->findAll();
        dd($movies);

        return $this -> render('index.html.twig');
    }

Konstruktor w Kontrolerze:
private $em;
    public function __construct(EntityManagerInterface $em) {
        $this->em = $em;
    }
    Wtedy nie trzeba dodawać EntityManagerInterface $em w argumentach funkcji oraz $em zamienić na $this->em

Funkcje w repozytoriach:
- findAll() -> Select * From table_name
- find(id_nr) -> Select * From table_name Where id = id_nr
- findBy([], ['id' => 'DESC']) -> Select * From table_name Order By id DESC
- findByOne([warunek1, warunek2, ...], [sortowanie]) -> Select * From table_name Where warunek1 and warunek2 ... Order by np. id DESC (warunek kolumna = wartość)
- cont([warunek]) -> liczy wiersze Select Count() From table_name Where warunek  (warunek kolumna = wartość)
- getClassName() > zwraca nazwę klasy

8. Assets
- npm run dev -> kompilacja assetów webpack (tworzy/aktualizuje folder public/build)
- npm run watch -> kompiluje pliki js w assets

- Sprawdzenie czy node jest zainstalowany: node -v
- symfony composer require symfony/webpack-encore-bundle -> instalacja paczki webpack do tworzenia assetów
- w webpack.config.js -> konfiguracja paczki webpack
- npm install do działania webpack
- symfony composer require symfony/asset -> paczka do zarządzania assetami
- dodanie pliku js do webpack.config.js (.addEntry('nazwa_pliku', './assets/nazwa_folderu/nazwa_pliku.js')) Dodaje plik do public/build po kompilacji
- dodanie pliku do app.js w assets (import './javascript/nazwa_pliku.js';) dodaje kod z pliku do app.js w public/build po kompilacji
- w base.html.twig: {{ encore_entry_script_tags('nazwa_pliku') }} -> przeszukuje public/build/app.js w poszukiwaniu pliku 'nazwa_pliku',
w ten sposób plik jest podpięty do wszystkich stron w projekcie

9. TailwindCSS
Instalacja biblioteki Tailwindcss, postcss i purgecss: npm install -D tailwindcss postcss purgecss-webpack-plugin glob-all path
- npx tailwindcss init -p -> stworzenie pliku konfiguracyjnego tailwindcss
- w postcss.config.js dodanie bibliotek ->

let tailwindcss = require('tailwindcss');
module.exports = {
  plugins: [
    tailwindcss('./tailwindcss.config.js'),
    require('postcss-import'),
    require('autoprefixer')
  ]
}

Dodanie konfiguracji postcss do webpack (przed ; na końcu pliku lub wyżej): 
- w webpack.config.js:

 .enablePostCssLoader((options) => {
        options.enablePostCssLoader = {
            config: './postcss.config.js'
        }
    })

- dodanie tailwindcss do app.css w assets/styles:
@tailwind base;
@tailwind components;
@tailwind utilities;

Do konfiguracji tailwind.config.js:
content: [
    "./assets/**/*.{vue, js, tx, jsx, tsx}", //** oznacza wszystkie pliki i pliki w podfolderach
    "./templates/**/*.{html, twig}"
  ], 

- npm install autoprefixer -> instalacja autoprefixer
- npm run build -> do skompilowania webpack
- npx tailwindcss -i ./assets/styles/app.css -o ./public/build/app.css --watch -> kompilacja pliku tailwindcss

10. Obrazki
-  npm install file-loader --save-dev -> instalacja biblioteki do budowania obrazków
Konfiguracja webpack.config.js:

.copyFiles({
        from: './assets/images', //skąd
        to: 'images/[path][name].[hash:8].[ext]', //dokąd
        pattern: /\.(png|jpg|jpeg)$/ //akceptowane rozszerzenia
    })

- npm run dev

11. Odczytywanie z bazy danych na stronie html

({{ zmienna|length }}) -> długość tablicy przekazanej w kontrolerze

Pętla po przekazanej tablicy i odczyt danych z kolumn
        {% for movie in movies %}
            <h2 class="text-gray-700 font-bold text-3xl py-2">
                    {{ movie.title }} //wartość z kolumny title
            </h2>
        {% endfor %}

- composer require symfony/form -> dodanie biblioteki do tworzenia form
- symfony console make:form NazwaFormy Nazwa_entity -> stworzenie formy dla danej klasy

12. Dodawanie elementów do bazy danych ze strony html

Utworzenie obiektu formy w kontrolerze:
 public function create(Request $request): Response {
        $movie = new Movie;
        $form = $this->createForm(MovieFormType::class, $movie); //utworzenie obiektu formy
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $newMovie = $form->getData();
  
            $imagePath = $form->get('imagePath')->getData(); //wyciągnięcie wartości nazwy klucza ze zmiennej
            if ($imagePath) {
                $newFileName = uniqid() . '.' . $imagePath->guessExtension(); //zmiana nazwa pliku gdy już taki istnieje

                try {
                    $imagePath->move( //przeniesienie pliku do innego folderu
                        $this->getParameter('kernel.project_dir') . '/public/uploads',
                        $newFileName
                    );
                } 
                catch (FileException $e) {
                    return new Response($e->getMessage());
                }

                $newMovie->setImagePath('/uploads/' . $newFileName); //nowa ścieżka do pliku
            }

            //wykonanie zapytania
            $this->em->persist($newMovie); 
            $this->em->flush();

            return $this->redirectToRoute('movies'); //przekierowanie do strony (podaje się name z Route)

            //Do testowania
            //dd($newMovie);
            //exit;
        }

        return $this -> render('movies/create.html.twig', [
            'form' => $form->createView()
        ]);
    }

    - composer require symfony/mime -> do działania metody guessExtension(0)

Dodanie formy na stronie html: 
 {{ form_start(form) }}  //form -> nazwa onbiektu formy z kontrolera

        {{ form_widget(form) }} //W form_widget to co się znajduje jest pod formą
        <button    
            type="submit"
            class="uppercase mt-15 bg-blue-500 text-gray-100 text-lg font-extrabold py-4 px-8 rounded-3xl">
            Submit Post
        </button>

    {{ form_end(form) }}

Dodanie stylów do formy:
- należy dopisać : use Symfony\Component\Form\Extension\Core\Type\TextType dla textu
- use Symfony\Component\Form\Extension\Core\Type\IntegerType; -> dla Int
- use Symfony\Component\Form\Extension\Core\Type\TextareaType; -> dla textarea
- use Symfony\Component\Form\Extension\Core\Type\FileType; -> dla plików 
- use Symfony\Component\HttpFoundation\File\Exception\FileException; -> dla złapanie wyjątku podczas przesyłania pliku

add('title', TextType::class, [ //TextType::class -> text IntegerType::class -> Integer TextareaType::class -> textarea FileType -> pliki
                'attr' => array(
                    'class' => 'bg-transparent block border-b-2 w-full h-20 text-6xl outlinenone', //klasy
                    'placeholder' => 'Wprowadź tytuł' //tekst wyświetlany gdy element jest pusty
                ),
                'label' => false -> wyłączenie wyświetlania napisu z nazwą kolumny
            ])

11. Aktualizacja elementów z bazy danych na stronie html
 //edycja wpisu
    #[Route('movies/edit/{id}', name: 'edit_movie')]
    public function edit($id, Request $request): Response {
        $movie = $this->movieRepository->find($id);
        $form = $this->createForm(MovieFormType::class, $movie);
        $form->handleRequest($request);
        $imagePath = $form->get('imagePath')->getData();

        if ($form->isSubmitted() && $form->isValid()) {
            if ($imagePath) { //czy obrazek istnieje
                //jak istnieje to wstawi go na serwer
                if ($movie->getImagePath() !== null) {
                    if (file_exists($this->getParameter('kernel.project_dir') . '/public' . $movie->getImagePath())) {
                  
                        $this->getParameter('kernel.project_dir') . $movie->getImagePath();
                        $newFileName = uniqid() . '.' . $imagePath->guessExtension();

                        try {
                            $imagePath->move( //przeniesienie pliku do innego folderu
                                $this->getParameter('kernel.project_dir') . '/public/uploads',
                                $newFileName
                            );
                        } 
                        catch (FileException $e) {
                            return new Response($e->getMessage());
                        }

                        //zmiana kolumn w bazie danych
                        $movie->setTitle($form->get('title')->getData());
                        $movie->setReleaseYear($form->get('releaseYear')->getData());
                        $movie->setDescription($form->get('description')->getData());
                        $movie->setImagePath('/uploads/' . $newFileName);
                        $this->em->flush();
                        return $this->redirectToRoute('movies');
                    }
                }
            }
            else {
                $movie->setTitle($form->get('title')->getData());
                $movie->setReleaseYear($form->get('releaseYear')->getData());
                $movie->setDescription($form->get('description')->getData());

                $this->em->flush();
                return $this->redirectToRoute('movies');
            }
        }

11. Usuwanie wspisów z bazy danych na stronie
    //usuwanie wpisu
    #[Route('movies/delete/{id}', name: 'delete_movie', methods: ['GET', 'DELETE'])]
    public function delete($id): Response {
        $movie = $this->movieRepository->find($id);
        $this->em->remove($movie);
        $this->em->flush();

        return $this->redirectToRoute('movies');
    }

12. Sprawdzanie modelu
- do działania Asert -> composer require symfony/validator doctrine/annotations
W klasie Entity:
- use Symfony\Component\Validator\Constraints as Assert; -> do #[Assert\NotBlank], #[Assert\Length(min:długość)]
- #[Assert\NotBlank] -> zapobiega przed wprowadzeniem pustego pola
- #[Assert\Length(min:długość, max:długość)] -> ustalenie minimalnej/maksymalnej długości tekstu
- w FormType w add pod attr:
'required' => false -> usuwa domyślnie wyświetlany komunikat przy próbie zatwierdzenia pustego labela
- Dodanie ? przed typem zmiennej w klasie Entity w funkcjach setNazwaKolumny() -> Walidatcja podczas edycji wpisów
- #[Assert\NotBlank] psuje przy plikach, należy dopisać przy tworzeniu $form->get('imagePath')->getData() !== null w warunke z submit

13. Logowanie i rejestracja
- composer require symfony/security-bundle -> instalacja biblioteki
Utworzenie tablicy urzytkowników:
- symfony console make:user NazwaTablicy (np. symfony console make:user User)
- unikalna wartość wyświetlana jako nazwa użytkownika (email, username, uuid) (np. email)
- czy zaszyfrować hasło

- w config/packages/security.yaml
- symfony console make:migration -> utworzenie migracji

- zakomentowanie jak symfony console make:migration nie działa w vendor\doctrine\migrations\lib\Doctrine\Migrations\Metadata\Storage\TableMetadataStorage.php: 
        $expectedTable = $this->getExpectedTable();

        if ($this->needsUpdate($expectedTable) !== null) {
            throw MetadataStorageError::notUpToDate();
        }
- symfony console doctrine:migrations:migrate -> jak nie działa usunąć pliki z php z migrations/ i ponownie utworzyć migrację

Dodanie kolumny to tabeli:
- Do pisanie w klasie entity nowej kolumny i funkcji oraz jak unikalna #[UniqueEntity(fields: ['nazwa_kolumny'], message: 'Wiadomość jak się wyświetla')]
- symfony console doctrine:migrations:diff 
- symfony console doctrine:migrations:migrate   

symfony console make:registration-form -> Utworzenie formy z rejestracją:
- czy użyć utworzonej klasy użytkowników
- czy dodać weryfikację email
- czy automatycznie weryfikować użytkownika po rejestracji
- gdzie przekierować użytkownika po rejestracji

Logowanie:
- symfony console make:auth -> Utworzenie strony z logowaniem
- 1 -> Login form authenticator
- nazwa klasy logowania
- nazwa kontrolera
- czy utworzyć strone /logout

czas: 4:07:10
