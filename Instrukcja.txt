1. Tworzenie projektu i komendy
- symfony new my_project_directory --version="6.2.*" --webapp -> utworzenie projektu
- symfony server:start - uruchomienie serwera na Windows
- php bin/console server:run  - uruchomienie serwera na Linux
- composer require symfony/<component_name> - instalacja komponentu
- console debug:route -> wyświetla wszystkie dostępne ścieżki
- symfony console -> Wyświetla wszystkie dostępne komendy w konsoli
- W konsoli symfony console make:controller <nazwa kontrolera>  -> Tworzy nowy kontroler
- symfony console help -> Wyświetlenie pomocy 

2. Opisy folderów
- W vendor/ -> Wszystki zainstalowane komponenty
- W templates/ -> Strony utworzene z kontrolerem


3. Kontrolery
 - #[Route('/ścieżka', name: 'nazwa')] //Ustawienie ścieżki  /ścieżka -> przekieruje do strony podanej niżej w funkcji
    public function oldMethod(): Response {
        return $this->render('folder/index.html.twig', [
            'controller_name' => 'MoviesController',
        ]);
    }

- #[Route('/movies/{name}', name: 'app_movies')] {name} przy ścieżce pozwala na wyświetlenie strony z funkcji niżej z dowolnej ścieżki /nazwa_folderu/name, gdzie name jest dowolne
- #[Route('/movies/{name}', name: 'app_movies', methods:['GET', 'HEAD'])]  //methods definiuje jakie metody są dostępne przy zdefiniowanej ścieżce
- #[Route('/movies/{name}', name: 'app_movies', defaults: ['name' => null], methods:['GET', 'HEAD'])] -> default definiuje domyślne wartości dla parametru w ścieżce
- public function index($name): Response //$name -> Odczytanie wartości ze ścieżki nazwa_folderu/{name}

4. Widoki
- composer require twig -> teorzy base.html.twig w templates
- domyslnie strony html.twig są w templates
- return $this -> render('nazwa_strony.html.twig', [parametr1 => wartość, ...]); -> otwarcie określonej strony z parametrami
- {{title}}  -> przakazanie zmiennej do strony html z Kontrolera

- warunki:
{% if title %}
    <p>{{title}}</p>
{% else %}
    <p>Brak tytułu</p>
{% endif %}

5. Używanie układu strony z base.html.twig na innych stronach
- {% extends 'nazwa_strony.html.twig' %} -> dołączenie innej strony na stronie
- <title>{% block title %}Welcome!{% endblock %}</title> -> tutuł będzie dołączony do strony z pliku w {% extends %}
- {#komentarz#} -> zakomentowanie czegoś w html.twig

- Pętla for:
    {% for i in movies %} 
        <li>{{i}}</li>
    {% endfor %}

- {{_self}} -> zmienna globalna zawierająca nazwę strony
- {{_charset}} -> zmienne zawierająca typ znaków (UTF-8)

Defincja zmiennych globalnych: w config/packages/twig.yaml pod default_path należy utworzyć globals: 
np. globals:
        author: Piotr //author -> zmienna

5. Konfiguracja bazy danych
Biblioteki wymagane:
- composer require symfony/orm-pack
- composer require --dev symfony/maker-bundle

- .env -> plik konfiguracyjny aplkacji (środowisko, baza danych)
- konfiguracja phpmyadmin -> phpMyAdmin/config.inc.php:
$cfg['Servers'][$i]['user'] = 'root';
$cfg['Servers'][$i]['password'] = 'placki123';

DATABASE_URL="mysql://db_user:db_password@127.0.0.1:3306/db_name?serverVersion=8.0.32&charset=utf8mb4":
- zamiast db_user nazwa użytkownika
- zamiast db_password hasło
- zamiast db_name nazwa bazy danych

Tworzenie klasy tablicy: (dla każdego entity automatycznie dodawana jest kolumna z id)
- symfony console make:entity nazwa_tablicy
- później podaje się nazwę kolumny, typ, max ilość znaków, czy może być null
- następnie można dodać następne kolumny
- by wyjść CTRL + c

Utworzona klasa jest w src/Entity
- symfony console make:entity istniejąca_klasa -> dodanie nowej kolumny
Utworzenie zależności między dwoma klasami tablic:
- typ danych ManyToMany 
- wpisanie nazwy klasy tablicy od której ma być zależna kolumna
- następne yes by dodać fukcję do obu klas
- cnazwa nowej kolumny w zależnej tablicy (klasie)

Migracja Utworzony tabel (klas entities) z bazą danych:
- symfony console make:migration
- symfony console doctrine:migration:migrate 
- yes

czas: 1:39:22